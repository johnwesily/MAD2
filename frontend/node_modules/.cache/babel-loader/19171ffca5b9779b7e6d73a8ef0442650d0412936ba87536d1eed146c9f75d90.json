{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      registerData: {\n        username: '',\n        password: ''\n      },\n      loginData: {\n        username: '',\n        password: ''\n      },\n      protectedMessage: '',\n      isAuthenticated: false\n    };\n  },\n  methods: {\n    async register() {\n      try {\n        await axios.post('http://localhost:5000/register', this.registerData);\n        alert('User registered successfully');\n      } catch (error) {\n        console.error(error);\n        alert('Registration failed');\n      }\n    },\n    async login() {\n      try {\n        const response = await axios.post('http://localhost:5000/login', this.loginData);\n        localStorage.setItem('token', response.data.access_token);\n        this.isAuthenticated = true;\n        this.getProtectedMessage();\n      } catch (error) {\n        console.error(error);\n        alert('Login failed');\n      }\n    },\n    async getProtectedMessage() {\n      try {\n        const response = await axios.get('http://localhost:5000/protected', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        this.protectedMessage = response.data.logged_in_as.username;\n      } catch (error) {\n        console.error(error);\n        alert('Failed to fetch protected message');\n      }\n    },\n    logout() {\n      localStorage.removeItem('token');\n      this.isAuthenticated = false;\n      this.protectedMessage = '';\n    }\n  }\n};","map":{"version":3,"names":["axios","data","registerData","username","password","loginData","protectedMessage","isAuthenticated","methods","register","post","alert","error","console","login","response","localStorage","setItem","access_token","getProtectedMessage","get","headers","Authorization","getItem","logged_in_as","logout","removeItem"],"sources":["/Users/john/Documents/Collage/MAD2/frontend/mad2/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Vue.js & Flask User Authentication</h1>\n    <div v-if=\"!isAuthenticated\">\n      <h2>Register</h2>\n      <form @submit.prevent=\"register\">\n        <input v-model=\"registerData.username\" placeholder=\"Username\" required>\n        <input type=\"password\" v-model=\"registerData.password\" placeholder=\"Password\" required>\n        <button type=\"submit\">Register</button>\n      </form>\n\n      <h2>Login</h2>\n      <form @submit.prevent=\"login\">\n        <input v-model=\"loginData.username\" placeholder=\"Username\" required>\n        <input type=\"password\" v-model=\"loginData.password\" placeholder=\"Password\" required>\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n\n    <div v-else>\n      <h2>Protected Content</h2>\n      <p>{{ protectedMessage }}</p>\n      <button @click=\"logout\">Logout</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      registerData: {\n        username: '',\n        password: ''\n      },\n      loginData: {\n        username: '',\n        password: ''\n      },\n      protectedMessage: '',\n      isAuthenticated: false\n    };\n  },\n  methods: {\n    async register() {\n      try {\n        await axios.post('http://localhost:5000/register', this.registerData);\n        alert('User registered successfully');\n      } catch (error) {\n        console.error(error);\n        alert('Registration failed');\n      }\n    },\n    async login() {\n      try {\n        const response = await axios.post('http://localhost:5000/login', this.loginData);\n        localStorage.setItem('token', response.data.access_token);\n        this.isAuthenticated = true;\n        this.getProtectedMessage();\n      } catch (error) {\n        console.error(error);\n        alert('Login failed');\n      }\n    },\n    async getProtectedMessage() {\n      try {\n        const response = await axios.get('http://localhost:5000/protected', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        this.protectedMessage = response.data.logged_in_as.username;\n      } catch (error) {\n        console.error(error);\n        alert('Failed to fetch protected message');\n      }\n    },\n    logout() {\n      localStorage.removeItem('token');\n      this.isAuthenticated = false;\n      this.protectedMessage = '';\n    }\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":"AA4BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE;MACZ,CAAC;MACDC,SAAS,EAAE;QACTF,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE;MACZ,CAAC;MACDE,gBAAgB,EAAE,EAAE;MACpBC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,QAAQA,CAAA,EAAG;MACf,IAAI;QACF,MAAMT,KAAK,CAACU,IAAI,CAAC,gCAAgC,EAAE,IAAI,CAACR,YAAY,CAAC;QACrES,KAAK,CAAC,8BAA8B,CAAC;MACvC,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBD,KAAK,CAAC,qBAAqB,CAAC;MAC9B;IACF,CAAC;IACD,MAAMG,KAAKA,CAAA,EAAG;MACZ,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMf,KAAK,CAACU,IAAI,CAAC,6BAA6B,EAAE,IAAI,CAACL,SAAS,CAAC;QAChFW,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACd,IAAI,CAACiB,YAAY,CAAC;QACzD,IAAI,CAACX,eAAc,GAAI,IAAI;QAC3B,IAAI,CAACY,mBAAmB,CAAC,CAAC;MAC5B,EAAE,OAAOP,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBD,KAAK,CAAC,cAAc,CAAC;MACvB;IACF,CAAC;IACD,MAAMQ,mBAAmBA,CAAA,EAAG;MAC1B,IAAI;QACF,MAAMJ,QAAO,GAAI,MAAMf,KAAK,CAACoB,GAAG,CAAC,iCAAiC,EAAE;UAClEC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;UACxD;QACF,CAAC,CAAC;QACF,IAAI,CAACjB,gBAAe,GAAIS,QAAQ,CAACd,IAAI,CAACuB,YAAY,CAACrB,QAAQ;MAC7D,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBD,KAAK,CAAC,mCAAmC,CAAC;MAC5C;IACF,CAAC;IACDc,MAAMA,CAAA,EAAG;MACPT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;MAChC,IAAI,CAACnB,eAAc,GAAI,KAAK;MAC5B,IAAI,CAACD,gBAAe,GAAI,EAAE;IAC5B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}